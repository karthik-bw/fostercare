version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - frontend-network
      - backend-network
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Backend service
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - backend-network
      - database-network
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgres://app_user:app_password@database:5432/${POSTGRES_DB:-fostercare}
      - SESSION_SECRET=${SESSION_SECRET:-default_session_secret_change_me_in_production}
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Database service
  database:
    build:
      context: .
      dockerfile: database/Dockerfile
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-fostercare}
    ports:
      - "5432:5432"
    networks:
      - database-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Optional Redis for caching
  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    networks:
      - backend-network
    restart: unless-stopped
    volumes:
      - redis-data:/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  database-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: